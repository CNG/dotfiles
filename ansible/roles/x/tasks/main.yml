---
- name: Install Xorg packages
  aur:
    name: "{{ item }}"
  become: yes
  become_user: aur_builder
  with_items:
    - xorg-server
    - xorg-xinit  # depends: xorg-xmodmap
    - xorg-xdpyinfo
    - xorg-xev
    - xorg-sessreg
    - xautomation
    - xdg-user-dirs
    - sxhkd
    - unclutter
    - autorandr-git
    - srandrd
    - autocutsel
    - xvkbd # virtual keyboard, need binary for my xbindkeysrc paste command 

- name: Remove default ACPI events file
  file:
    path: /etc/acpi/events/anything
    state: absent

#- name: Create user directories
#  command: /usr/bin/xdg-user-dirs-update
#  become: yes
#  become_user: "{{ user.name }}"

# following should be replaced with `xdg-user-dirs-update --set DESKTOP ~`
#- name: Change desktop folder
#  become: yes
#  become_user: "{{ user.name }}"
#  lineinfile:
#    path: /home/{{ user.name }}/.config/user-dirs.dirs
#    regexp: "^XDG_DESKTOP_DIR="
#    state: present
#    line: 'XDG_DESKTOP_DIR="$HOME/"'

- name: Enable middle click scrolling
  copy:
    src: 30-scroll.conf
    dest: /etc/X11/xorg.conf.d/30-scroll.conf
  when: middle_click_scroll is defined and middle_click_scroll == True

- name: Enable gestures
  aur:
    name: libinput-gestures
  become: yes
  become_user: aur_builder

- name: Enable faster mouse
  copy:
    src: 50-mouse-acceleration.conf
    dest: /etc/X11/xorg.conf.d/50-mouse-acceleration.conf

- name: Enable natural scrolling
  copy:
    src: 31-scroll-direction.conf
    dest: /etc/X11/xorg.conf.d/31-scroll-direction.conf

- name: Kernel module to enable controlling external monitor
  copy:
    src: i2c-dev.conf
    dest: /etc/modules-load.d/i2c-dev.conf
- name: Udev rule to enable controlling external monitor
  copy:
    src: 45-ddcutil-i2c.rules
    dest: /etc/udev/rules.d/45-ddcutil-i2c.rules
- name: Install ddcutil to control external monitor
  aur:
    name: ddcutil
  become: yes
  become_user: aur_builder

# Alternatively, use ddcci-driver-linux-dkms to expose external monitors in sysfs.
# Then load ddcci kernel module and use any backlight utility.
# But this didn't seem to work. It added a ddcci backlight, but setting it
# had no effect other than setting to 0 made laptop display turn off.
# - name: Enable controlling external monitor
#   copy:
#     src: ddcci.conf
#     dest: /etc/modules-load.d/ddcci.conf
# - name: Install DDCI DKMS to control external monitor
#   aur:
#     name: ddcci-driver-linux-dkms  # to expose external monitors in sysfs
#   become: yes
#   become_user: aur_builder

- name: Check for NVIDIA graphics card
  shell: lspci -k | grep -i nvidia
  register: nvidia_check
  failed_when: "nvidia_check.rc == 2"
  changed_when: False

- name: Intel setup
  when: nvidia_check.rc == 1 or ansible_product_name == "Precision 5530"
  become: yes
  block:
  # TODO: Do we just want to get rid of this or try to exclude the Dell? hmm.
  # # This makes Dell XPS 9370 backlight control stop working
  # - name: "Intel graphics: early kernel mode setting"
  #   become: yes
  #   lineinfile:
  #     path: /etc/mkinitcpio.conf
  #     regexp: "^MODULES=\\(((?:(?!{{item}}).)*)\\)"
  #     backrefs: yes
  #     state: present
  #     line: "MODULES=(\\1 {{item}})"
  #   with_items:
  #     - i915
  #   # TODO: notify: rebuild linux

  # No longer need this file using modesetting driver
  #- name: "Intel graphics: Xorg config (for TearFree, etc.)"
  #  copy:
  #    src: 20-intel.conf
  #    dest: /etc/X11/xorg.conf.d/20-intel.conf

  # Not sure if need this one for hardware accel under modesetting.
  #- name: "Intel graphics: Install packages"
  #  aur:
  #    name: "{{ item }}"
  #  become_user: aur_builder
  #  with_items:
  #    # - libva-intel-driver  # not sure why I had this one, I think I need media
  #    - intel-media-driver

  - name: "Intel graphics: Install i915 kernel parameters"
    copy:
      src: i915.conf
      dest: /etc/modprobe.d/i915.conf
  - name: "NVIDIA: Remove Xorg config overrides!"
    file:
      dest: /etc/X11/xorg.conf.d/20-nvidia.conf
      state: absent
  - name: "NVIDIA: direct rendering manager: kernel mode setting: remove kernel modules!"
    become: yes
    replace:
      path: /etc/mkinitcpio.conf
      regexp: "^(MODULES=.*) {{item}}(.*)"
      replace: '\1\2'
    with_items:
      - nvidia
      - nvidia_modeset
      - nvidia_uvm
      - nvidia_drm
    # TODO: notify: rebuild linux
  - name: "NVIDIA: direct rendering manager: remove kernel parameter"
    replace:
      path: /boot/loader/entries/arch.conf
      regexp: "^(options .*) {{item}}(.*)"
      replace: '\1\2'
    with_items:
      - nvidia-drm.modeset=1
  - name: "NVIDIA: Remove Pacman hook"
    file:
      path: /etc/pacman.d/hooks/nvidia.hook
      state: absent
  - name: "NVIDIA: Remove packages"
    pacman:
      state: absent
      name:
        - nvidia
        - cuda

- name: NVIDIA setup
  when: nvidia_check.rc == 0 and ansible_product_name != "Precision 5530"
  become: yes
  block:
  - name: "NVIDIA: direct rendering manager: kernel mode setting: add kernel modules"
    lineinfile:
      path: /etc/mkinitcpio.conf
      regexp: "^MODULES=\\(((?:(?!{{item}}).)*)\\)"
      backrefs: yes
      state: present
      line: "MODULES=(\\1 {{item}})"
    with_items:
      - nvidia
      - nvidia_modeset
      - nvidia_uvm
      - nvidia_drm
    # TODO notify: rebuild linux
  - name: "NVIDIA: direct rendering manager: add kernel parameter"
    lineinfile:
      path: /boot/loader/entries/arch.conf
      regexp: "^options ((?:(?!{{item}}).)*)"
      backrefs: yes
      state: present
      line: "options \\1 {{item}}"
    with_items:
      - nvidia-drm.modeset=1
  - name: "NVIDIA: Install Pacman hook"
    copy:
      src: nvidia.hook
      dest: /etc/pacman.d/hooks/nvidia.hook
      mode: 0644
  - name: "NVIDIA: Remove default Xorg config"
    file:
      path: /etc/X11/xorg.conf
      state: absent
  - name: "NVIDIA: Install Xorg config overrides"
    copy:
      src: 20-nvidia.conf
      dest: /etc/X11/xorg.conf.d/20-nvidia.conf
      mode: 0644
  - name: "NVIDIA: Install packages"
    aur:
      name: "{{ item }}"
    become_user: aur_builder
    with_items:
      - nvidia
      - cuda
  - name: "Intel graphics: Remove i915 kernel parameters"
    file:
      path: /etc/modprobe.d/i915.conf
      state: absent
  - name: "Intel graphics: remove kernel mode setting!"
    become: yes
    replace:
      path: /etc/mkinitcpio.conf
      regexp: '^(MODULES=.*) i915(.*)'
      replace: '\1\2'
    # TODO notify: rebuild linux
  - name: "Intel graphics: make sure the config file is gone!"
    file:
      path: /etc/X11/xorg.conf.d/20-intel.conf
      state: absent
  - name: "Intel graphics: Remove packages"
    pacman:
      name:
        - libva-intel-driver
        - intel-media-driver
      state: absent


- name: Add user to video group
  user:
    name: "{{ user.name }}"
    groups: video
    append: yes
