# Grab CPU flags from `/proc/cpuinfo` and put the result into the
# `cpu_flags_cmd` variable.
- name: get cpu flags
  command: >
    awk -F: '/^flags/ {print $2; exit}' /proc/cpuinfo
  register: cpu_flags_cmd
  changed_when: False

# Extract the flags into a list variable named `cpu_flags`.
- name: set cpu flags fact
  set_fact:
    cpu_flags: "{{ cpu_flags_cmd.stdout.split() }}"

# Identify the processor manufacturer by looking for "Intel" or "AMD"
# in `/proc/cpuinfo`.
- name: check if Intel processor
  command: grep Intel /proc/cpuinfo
  register: is_intel
  changed_when: False
  failed_when: is_intel.rc > 1  # grep rc 1 not error

- name: check if AMD processor
  command: grep AMD /proc/cpuinfo
  register: is_amd
  changed_when: False
  failed_when: is_amd.rc > 1  # grep rc 1 not error

- name: AMD setup
  when: is_amd.rc == 0  # grep got matches
  become: yes
  block:
    - name: Install AMD packages
      aur:
        name: "{{ item }}"
      become_user: aur_builder
      with_items:
        - amd-ucode
    - name: Insert AMD microcode image into boot config
      lineinfile:
        path: /boot/loader/entries/arch.conf
        line: "initrd /amd-ucode.img"
        insertafter: "^linux /vmlinuz-linux$"
        state: present
    - name: Remove Intel microcode image from boot config
      lineinfile:
        path: /boot/loader/entries/arch.conf
        line: "initrd /intel-ucode.img"
        state: absent

- name: Intel setup
  when: is_intel.rc == 0  # grep got matches
  become: yes
  block:
    - name: Install Intel packages
      aur:
        name: "{{ item }}"
      become_user: aur_builder
      with_items:
        - intel-ucode
    - name: Insert Intel microcode image into boot config
      lineinfile:
        path: /boot/loader/entries/arch.conf
        line: "initrd /intel-ucode.img"
        insertafter: "^linux /vmlinuz-linux$"
        state: present
    - name: Remove AMD microcode image from boot config
      lineinfile:
        path: /boot/loader/entries/arch.conf
        line: "initrd /amd-ucode.img"
        state: absent

- import_tasks: kvm.yml
  when: kvm is defined

