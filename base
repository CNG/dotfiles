#!/bin/bash

# mostly from https://gist.github.com/binaerbaum/535884a7f5b8a8697557 but automated the partitioning
# loadkeys dvorak

set -o xtrace
set -o errexit

# ROOTDEVICE=$(lsblk -d -p -n -l -o NAME -e 7,11 | head -1)
ROOTDEVICE=/dev/nvme0n1
HOSTNAME=Charlie24
SETUPDIR=/tmp/setup
WIFI_SSID=NinePinesGuqin

iwctl station wlan0 connect $WIFI_SSID

timedatectl set-ntp true

# In case we are rerunning and need to clean up...
swapoff -a
umount ${ROOTDEVICE}* /mnt | true
umount $ROOTDEVICE"p1" /mnt/boot | true

read -p "Create new base partitions, deleting all boot data? " -n 1 -r
echo    # (optional) move to a new line
if [[ $REPLY =~ ^[Yy]$ ]]
then
  # Create partitions
  parted --script $ROOTDEVICE mklabel gpt
  partprobe
  # EFI
  sgdisk --new=0:0:+512M --typecode=1:ef00 $ROOTDEVICE
  sgdisk --change-name=1:EFI $ROOTDEVICE
  mkfs.vfat -F32 $ROOTDEVICE"p1"
  # Windows
  sgdisk --new=0:0:+100G $ROOTDEVICE
  # Encrypted root, swap
  sgdisk --new=0:0:0 $ROOTDEVICE
  cryptsetup --batch-mode luksFormat --type=luks2 --label=linux $ROOTDEVICE"p3" # enter password
  cryptsetup luksAddKey $ROOTDEVICE"p3" # enter password AS IF QWERTY
fi

# Set up Btrfs subvolumes
cryptsetup open --type luks $ROOTDEVICE"p3" luks || cryptsetup open --type luks $ROOTDEVICE"p4" luks
mkfs.btrfs -f -L btrfs /dev/mapper/luks
mount /dev/mapper/luks /mnt
btrfs subvolume create /mnt/root
btrfs subvolume create /mnt/home
btrfs subvolume create /mnt/home_cache
btrfs subvolume create /mnt/var_cache
btrfs subvolume create /mnt/var_lib_mysql
btrfs subvolume create /mnt/var_log
btrfs subvolume create /mnt/swap
btrfs subvolume create /mnt/snapshots
umount /mnt
# Mount the new system
mount -o noatime,compress-force=zstd:1,subvol=root /dev/mapper/luks /mnt
mkdir -p /mnt/boot
mount $ROOTDEVICE"p1" /mnt/boot
mkdir -p /mnt/{mnt/btrfs-root,home,var/{cache,lib/mysql,log},swap,.snapshots}
mount -o noatime,compress-force=zstd:1,subvol=/ /dev/mapper/luks /mnt/mnt/btrfs-root
mount -o noatime,compress-force=zstd:1,subvol=home /dev/mapper/luks /mnt/home
mount -o noatime,compress-force=zstd:1,subvol=var_cache /dev/mapper/luks /mnt/var/cache
mount -o noatime,compress-force=zstd:1,subvol=var_lib_mysql /dev/mapper/luks /mnt/var/lib/mysql
mount -o noatime,compress-force=zstd:1,subvol=var_log /dev/mapper/luks /mnt/var/log
mount -o noatime,compress-force=zstd:1,subvol=swap /dev/mapper/luks /mnt/swap
mount -o noatime,compress-force=zstd:1,subvol=snapshots /dev/mapper/luks /mnt/.snapshots
mkdir -p /mnt/home/cgorichanaz/.cache
mount -o noatime,compress-force=zstd:1,subvol=home_cache /dev/mapper/luks /mnt/home/cgorichanaz/.cache
swapsize=$(cat /proc/meminfo | grep MemTotal | awk '{ print $2 }')
swapsize=$(($swapsize/1000000))"G"
btrfs filesystem mkswapfile --size $swapsize --uuid clear /mnt/swap/swapfile
swapon /mnt/swap/swapfile  # Not needed but a good thing to test

sed -i '/Parallel/c\ParallelDownloads = 50' /etc/pacman.conf
# terminus-font allows selecting larger font for small HiDPI screens
pacman -Sy archlinux-keyring
pacstrap /mnt base linux linux-firmware lvm2 base-devel efibootmgr networkmanager terminus-font

# 'install' fstab
genfstab -pU /mnt >> /mnt/etc/fstab
# apparently gets added already by genfstab since we did swapon
# echo "/swap/swapfile	none	swap	defaults	0	0" >> /mnt/etc/fstab
# Make /tmp a ramdisk
echo "tmpfs	/tmp	tmpfs	defaults,noatime,mode=1777	0	0" >> /mnt/etc/fstab
# Change relatime on all non-boot partitions to noatime (reduces wear if using an SSD)

# Enter the new system
cp -a $SETUPDIR/dotfiles/base_include /mnt
arch-chroot /mnt ./base_include ${ROOTDEVICE}p2 $HOSTNAME

read -p "Reboot into the new system?" -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
  # Unmount all partitions
  umount -R /mnt
  swapoff -a
  reboot
fi
